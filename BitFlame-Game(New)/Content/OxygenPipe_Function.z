/*************************************
Filename:  OxygenPipe_Function.z
Author: Jakob McFarland
Contributors: NULL
Last modified: 2/15/18
Brief: This Component connects the owner to other oxygen pipes and controls their visual effects
******************************************/

class OxygenPipe_Function : ZilchComponent
{
    [Dependency] var Transform : Transform = null;
    
    //enter as range squared
    [Property] var ConnectingRange : Integer = 0;
    
    [Property] var Origin : Boolean = false;
    
    var ConnectedToOrigin : Boolean = false;
    
    var Connected : Boolean = false;
    
    [Property] var Ship : CogPath;
    
    var ConnectedTo : Cog; 
    
    var HasConnected : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        this.ConnectedTo = this.Owner;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var field = this.Owner.FindChildByName("Oxygen_Field");
      
        if(this.Origin)
        {
            this.Connected = true;
        }    
                        
        if(this.Connected)
        {  
            //check all the oxygen pipes
            foreach(var objects in this.Space.FindAllObjectsByName("OxygenPipe"))
            {    
                //try connecting them
                this.PipeConnect(objects);
            }
             
            if(field.Oxygen_Regen_Field != null)
            {
                field.Oxygen_Regen_Field.Active = true;
            }
            
            if(this.ConnectedTo != null)
            {   
                var debugLine = DebugLine();
                //Sets parameters for the debug line
                debugLine.Start(this.Transform.Translation);
                debugLine.End(this.ConnectedTo.Transform.Translation);
                debugLine.Float4Color(Real4(0, 100,100, 10));
                debugLine.Width(Real(4));
                //draw it
                debugLine.Draw();
            }
        }
        else if(!this.Connected)
        {      
            //check all the oxygen pipes
            foreach(var objects in this.Space.FindAllObjectsByName("OxygenPipe"))
            {    
                //try connecting them
                this.PipeConnect(objects);
            }   
            //check if connection was found
            if(this.HasConnected)
            {
                this.Connected = true;
            }
            
            if(field.Oxygen_Regen_Field != null)
            {
                field.Oxygen_Regen_Field.Active = false;
            }
        }
        
        if(this.ConnectedTo != null)
        {
            if(this.ConnectedTo.OxygenPipe_Function.Origin)
            {
                this.ConnectedToOrigin = true;
            }
            else
            {
                this.ConnectedToOrigin = false;
            }
        }
    }
    
    function PipeConnect(object : Cog)
    {
        var connectingVector = object.Transform.Translation - this.Transform.Translation;
        
        var connectingLength = (connectingVector.X * connectingVector.X) + (connectingVector.Y + connectingVector.Y);
        
        //only connect to other pipes that are already connected
        if(object.OxygenPipe_Function.Connected == true)
        {   
            //make sure the other pipe is in range
            if(connectingLength <= this.ConnectingRange)
            { 
                this.RayCast(this.Transform.Translation, connectingVector, object);
            }
        }
    }
    
    function RayCast(start : Real3, end : Real3, object : Cog)
    {
        //create a ray cast in the direction of the other object
        var ray = Ray();
        ray.Start = start;
        ray.Direction = end;
        
        var filter = CastFilter();  
        filter.IgnoreDynamic = true;  
        filter.IgnoreCog = this.Ship.Cog;         
                        
        var castResult = this.Space.PhysicsSpace.CastRayFirstFiltered(ray, filter);
        
        var objectHit = castResult.ObjectHit;
        
        //make sure the object hit is the other pipe, if it's not then there's something in the way
        if(objectHit == object)
        {
            Console.WriteLine("Test 1");
            this.ConnectedTo = object;
            this.HasConnected = true;
        }
    }
}
