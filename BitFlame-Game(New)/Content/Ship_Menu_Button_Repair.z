/***********************
Ship_Menu_Button_Repair.Z
by: Jakob McFarland
Contributers: Luke Taranowski
Date: 2/12/18
Brief: these components will make a button look good and be functional for repairing the ship
***********************/

class Ship_Menu_Button_Repair_Visual : ZilchComponent
{
    [Property] var IronCost : Integer = 0; 
    [Property] var CopperCost : Integer = 0; 
    [Property] var TitaniumCost : Integer = 0; 
    [Property] var AluminiumCost : Integer = 0;  
    
    [Dependency] var Reactive : Reactive = null;
    [Dependency] var Sprite : Sprite = null;
    [Dependency] var Transform : Transform = null;
      
    //colors for sits
    var OriginalColor :Real4 = Real4();
      
    [Property] var HoverColor : Real4 = Real4(1, 1, 1, 1);

    [Property] var ClickColor : Real4 = Real4(1.0, 1.0, 1.0, 1); 
     
    [Property] var DisabledColor : Real4 = Real4(1.0, 1.0, 1.0, 1);
    
    var OriginalScale : Real3 = Real3();
      
    [Property] var HoverScale : Real = 1.2;
      
    [Property] var ClickScale : Real = 1.0;
      
    function Initialize(init : CogInitializer)
    {
        this.OriginalColor = this.Sprite.Color;
        this.OriginalScale = this.Transform.Scale;
      
        Zero.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter);
        Zero.Connect(this.Owner, Events.MouseExit, this.OnMouseExit);
        Zero.Connect(this.Owner, Events.LeftMouseDown, this.OnLeftMouseDown);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(!(this.GameSession.GameVars.PlayerResources >= this.IronCost && this.GameSession.GameVars.PlayerCopper >= this.CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.AluminiumCost))
        {
            this.Sprite.Color = this.DisabledColor;
        }
    }

    function OnLeftMouseDown(event : ViewportMouseEvent)
    {
        if(this.GameSession.GameVars.PlayerResources >= this.IronCost && this.GameSession.GameVars.PlayerCopper >= this.CopperCost && this.GameSession.GameVars.PlayerTitanium>= this.TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.AluminiumCost)
        {
            this.Owner.Actions.Cancel();
            var seq = Action.Sequence(this.Owner.Actions);
            var grp = Action.Group(seq);
            
            Action.Property(grp, @this.Sprite.Color, this.ClickColor, 0.03, Ease.QuadInOut);
            Action.Property(grp, @this.Transform.Scale, this.OriginalScale * this.ClickScale, 0.3, Ease.QuadInOut);
        }
    }

    function OnMouseExit(event : ViewportMouseEvent)
    {
        var color = this.OriginalColor;
        
        if(!(this.GameSession.GameVars.PlayerResources >= this.IronCost && this.GameSession.GameVars.PlayerCopper >= this.CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.AluminiumCost))
        {
            color = this.DisabledColor;
        }

        this.Transform.Translation.Z -= 10;
        this.Owner.Actions.Cancel();
        var seq = Action.Sequence(this.Owner.Actions);
        var grp = Action.Group(seq);
        
        Action.Property(grp, @this.Sprite.Color, color, 0.03, Ease.QuadInOut);
        Action.Property(grp, @this.Transform.Scale, this.OriginalScale, 0.3, Ease.QuadInOut);
    }

   function OnMouseEnter(event : ViewportMouseEvent)
        {
            if(this.GameSession.GameVars.PlayerResources >= this.IronCost && this.GameSession.GameVars.PlayerCopper >= this.CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.AluminiumCost)
            {  
               this.Transform.Translation.Z += 10;
                   
               this.Owner.Actions.Cancel();
               var seq = Action.Sequence(this.Owner.Actions);
               var grp = Action.Group(seq);
               
               Action.Property(grp, @this.Sprite.Color, this.HoverColor, 0.03, Ease.QuadInOut);
               Action.Property(grp, @this.Transform.Scale, this.OriginalScale * this.HoverScale, 0.3, Ease.QuadInOut);
           }
        }
    }

    class Ship_Menu_Button_Repair_Function : ZilchComponent
    {
        // This could be more efficient
        
        // Stage 1 ship repair costs
        [Property] var Stage1IronCost : Integer = 0;
        [Property] var Stage1CopperCost : Integer = 0; 
        [Property] var Stage1TitaniumCost : Integer = 0;
        [Property] var Stage1AluminiumCost : Integer = 0;
        
        // Stage 2 ship repair costs
        [Property] var Stage2IronCost : Integer = 0;
        [Property] var Stage2CopperCost : Integer = 0; 
        [Property] var Stage2TitaniumCost : Integer = 0;
        [Property] var Stage2AluminiumCost : Integer = 0;
        
        // Stage 3 ship repair costs
        [Property] var Stage3IronCost : Integer = 0;
        [Property] var Stage3CopperCost : Integer = 0; 
        [Property] var Stage3TitaniumCost : Integer = 0;
        [Property] var Stage3AluminiumCost : Integer = 0;
        
        // Stage 4 ship repair costs
        [Property] var Stage4IronCost : Integer = 0;
        [Property] var Stage4CopperCost : Integer = 0; 
        [Property] var Stage4TitaniumCost : Integer = 0;
        [Property] var Stage4AluminiumCost : Integer = 0;

        [Dependency] var Reactive : Reactive = null;

        [Dependency] var Transform : Transform = null;

        function Initialize(init : CogInitializer)
        {
            Zero.Connect(this.Owner, Events.LeftMouseUp, this.OnLeftMouseUp);
        }

        function OnLeftMouseUp(event : ViewportMouseEvent)
        {
            Console.WriteLine("up");
            
            // Checks for the ships repair stage
            if(this.GameSession.GameVars.ShipRepairStage0)
            {
                // Checks if the player has enough resources
                if(this.GameSession.GameVars.PlayerResources >= this.Stage1IronCost && this.GameSession.GameVars.PlayerCopper >= this.Stage1CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.Stage1TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.Stage1AluminiumCost)
                { 
                    Console.WriteLine("func");
                    // Subtract the cost of resources from player
                    this.GameSession.GameVars.PlayerResources -= this.Stage1IronCost;
                    this.GameSession.GameVars.PlayerCopper -= this.Stage1CopperCost;
                    this.GameSession.GameVars.PlayerTitanium -= this.Stage1TitaniumCost;
                    this.GameSession.GameVars.PlayerAluminium -= this.Stage1AluminiumCost;
                    
                    // Sets the ships repair stage to the next one and set the old one to false
                    this.GameSession.GameVars.ShipRepairStage0 = false;
                    this.GameSession.GameVars.ShipRepairStage1 = true;
                    
                }
            }
            // Checks for the ships repair stage
            else if(this.GameSession.GameVars.ShipRepairStage1)
            {
                // Checks if the player has enough resources
                if(this.GameSession.GameVars.PlayerResources >= this.Stage2IronCost && this.GameSession.GameVars.PlayerCopper >= this.Stage2CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.Stage2TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.Stage2AluminiumCost)
                { 
                    Console.WriteLine("func");
                    // Subtract the cost of resources from player
                    this.GameSession.GameVars.PlayerResources -= this.Stage2IronCost;
                    this.GameSession.GameVars.PlayerCopper -= this.Stage2CopperCost;
                    this.GameSession.GameVars.PlayerTitanium -= this.Stage2TitaniumCost;
                    this.GameSession.GameVars.PlayerAluminium -= this.Stage2AluminiumCost;
                    
                    // Sets the ships repair stage to the next one and set the old one to false
                    this.GameSession.GameVars.ShipRepairStage1 = false;
                    this.GameSession.GameVars.ShipRepairStage2 = true;
                    
                }
            }
            // Checks for the ships repair stage
            else if(this.GameSession.GameVars.ShipRepairStage2)
            {
                // Checks if the player has enough resources
                if(this.GameSession.GameVars.PlayerResources >= this.Stage3IronCost && this.GameSession.GameVars.PlayerCopper >= this.Stage3CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.Stage3TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.Stage3AluminiumCost)
                { 
                    Console.WriteLine("func");
                    // Subtract the cost of resources from player
                    this.GameSession.GameVars.PlayerResources -= this.Stage3IronCost;
                    this.GameSession.GameVars.PlayerCopper -= this.Stage3CopperCost;
                    this.GameSession.GameVars.PlayerTitanium -= this.Stage3TitaniumCost;
                    this.GameSession.GameVars.PlayerAluminium -= this.Stage3AluminiumCost;
                    
                    // Sets the ships repair stage to the next one and set the old one to false
                    this.GameSession.GameVars.ShipRepairStage2 = false;
                    this.GameSession.GameVars.ShipRepairStage3 = true;
                    
                }
            }
            // Checks for the ships repair stage
            else if(this.GameSession.GameVars.ShipRepairStage3)
            {
                // Checks if the player has enough resources
                if(this.GameSession.GameVars.PlayerResources >= this.Stage4IronCost && this.GameSession.GameVars.PlayerCopper >= this.Stage4CopperCost && this.GameSession.GameVars.PlayerTitanium >= this.Stage4TitaniumCost && this.GameSession.GameVars.PlayerAluminium >= this.Stage4AluminiumCost)
                { 
                    
                    Console.WriteLine("func");
                    // Subtract the cost of resources from player
                    this.GameSession.GameVars.PlayerResources -= this.Stage4IronCost;
                    this.GameSession.GameVars.PlayerCopper -= this.Stage4CopperCost;
                    this.GameSession.GameVars.PlayerTitanium -= this.Stage4TitaniumCost;
                    this.GameSession.GameVars.PlayerAluminium -= this.Stage4AluminiumCost;
                    
                    // Sets the ships repair stage to the next one, set the old one to false and change the level to the win level
                    this.GameSession.GameVars.ShipRepairStage3 = false;
                    this.GameSession.GameVars.ShipRepairStage4 = true;
                    this.GameSession.GameVars.NewLevel= Level.WinLevel;
                }
            }
        }
}