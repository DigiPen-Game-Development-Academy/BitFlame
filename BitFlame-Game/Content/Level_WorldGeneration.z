/*************************************
Filename: Level_WorldGeneration.z
Author: Jakob McFarland
Contributors: NULL
Last modified: 1/25/18
Brief: This Component will generate a random world when initialized.
******************************************/


class Level_WorldGeneration : ZilchComponent
{
    [Property] var AsteroidArchetype : Archetype = null;
    
    [Property] var EnemyArchetype : Archetype = null;
     
    [Property] var HiveArchetype : Archetype = null;
    
    //each range is the inputed value
    [Property] var AsteroidProbability : Integer = 50;
    
    [Property] var EmptySpaceProbability : Integer = 25;
      
    [Property] var HiveProbability : Integer = 20;
    
    [Property] var EnemyProbability : Integer = 5;
    
    [Property] var MaxX : Integer = 245;
    
    [Property] var MaxY : Integer = 245;
    
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        var currentX = -this.MaxX;
        var currentY = -this.MaxY; 
   
        for(currentY; currentY <= this.MaxY; currentY += 10)
        {
            for(currentX; currentX <= this.MaxX; currentX += 10)
            {
                this.BuildSquare(currentX, currentY);
                
                Console.WriteLine(currentX);
                Console.WriteLine(currentY);
            }
            
        }
        
    }
    
    //builds the square according to the probablity tables lain out.
    function BuildSquare(x : Integer, y : Integer)
    {
        var selector = this.RandomGenerator.Range(0, 100) + this.RandomGenerator.Range(0, 100);
        
        while(selector > 100)
        {
            selector -= 100;
        }
        
        Console.WriteLine(selector);
        
        if(selector < this.AsteroidProbability)
        {
            this.Space.CreateAtPosition( this.AsteroidArchetype, Real3(x, y, 0));
        }
        else if (selector < this.AsteroidProbability + this.EmptySpaceProbability)
        {
            
        }
        else if (selector < this.AsteroidProbability + this.EmptySpaceProbability + this.HiveProbability)
        {
            this.Space.CreateAtPosition( this.HiveArchetype, Real3(x, y, 0));
        }
        else if (selector < this.AsteroidProbability + this.EmptySpaceProbability + this.HiveProbability + this.EnemyProbability)
        {
            this.Space.CreateAtPosition( this.EnemyArchetype, Real3(x, y, 0));
        }
    }
}
