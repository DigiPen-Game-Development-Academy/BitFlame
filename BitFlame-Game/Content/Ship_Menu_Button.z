/***********************
Ship_Menu_Button.Z
by: Jakob McFarland
Contributers:
Date: 2/1/18
Brief: these components will make a button look good and be functional
***********************/

class Ship_Menu_Button_Visual : ZilchComponent
{
  [Dependency] var Reactive : Reactive = null;
  [Dependency] var Sprite : Sprite = null;
  [Dependency] var Transform : Transform = null;
  
  //colors for sits
  var OriginalColor :Real4 = Real4();
  
  [Property] var HoverColor : Real4 = Real4(1, 1, 1, 1);

  [Property] var ClickColor : Real4 = Real4(1.0, 1.0, 1.0, 1);  
  
  var OriginalScale : Real3 = Real3();
  
  [Property] var HoverScale : Real = 1.2;
  
  [Property] var ClickScale : Real = 1.0;
  
  function Initialize(init : CogInitializer)
  {
    this.OriginalColor = this.Sprite.Color;
    this.OriginalScale = this.Transform.Scale;
  
    Zero.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter);
    Zero.Connect(this.Owner, Events.MouseExit, this.OnMouseExit);
    Zero.Connect(this.Owner, Events.LeftMouseDown, this.OnLeftMouseDown);
    
  }

  function OnLeftMouseDown(event : ViewportMouseEvent)
  {
    this.Owner.Actions.Cancel();
    var seq = Action.Sequence(this.Owner.Actions);
    var grp = Action.Group(seq);
    
    Action.Property(grp, @this.Sprite.Color, this.ClickColor, 0.03, Ease.QuadInOut);
    Action.Property(grp, @this.Transform.Scale, this.OriginalScale * this.ClickScale, 0.3, Ease.QuadInOut);
  }

  function OnMouseExit(event : ViewportMouseEvent)
  {
    this.Transform.Translation.Z -= 10;
    this.Owner.Actions.Cancel();
    var seq = Action.Sequence(this.Owner.Actions);
    var grp = Action.Group(seq);
    
    Action.Property(grp, @this.Sprite.Color, this.OriginalColor, 0.03, Ease.QuadInOut);
    Action.Property(grp, @this.Transform.Scale, this.OriginalScale, 0.3, Ease.QuadInOut);
  }

  function OnMouseEnter(event : ViewportMouseEvent)
  {
    this.Transform.Translation.Z += 10;
        
    this.Owner.Actions.Cancel();
    var seq = Action.Sequence(this.Owner.Actions);
    var grp = Action.Group(seq);
    
    Action.Property(grp, @this.Sprite.Color, this.HoverColor, 0.03, Ease.QuadInOut);
    Action.Property(grp, @this.Transform.Scale, this.OriginalScale * this.HoverScale, 0.3, Ease.QuadInOut);

  }

}

class Ship_Menu_Button_Function : ZilchComponent
{
    [Dependency] var Reactive : Reactive = null;

    [Dependency] var Transform : Transform = null;

    [Property] var Camera : CogPath = null; 
  
    [Property] var NewCameraPosition : Real3 = Real3(0.0, 0.0, 0.0);

    [Property] var MoveTime : Real = 0.2; 

    [Property] var Player : CogPath = null; 

    [Property] var Reload : Boolean = false; 

    [Property] var Quit : Boolean = false;  
  
    function Initialize(init : CogInitializer)
    {
        this.NewCameraPosition.Z =  this.Camera.Cog.Transform.Translation.Z;
        Zero.Connect(this.Owner, Events.LeftMouseUp, this.OnLeftMouseUp);
    }

    function OnLeftMouseUp(event : ViewportMouseEvent)
    {
    
        if(this.Quit)
        {
            this.GameSession.Quit();
        }
        
        if(this.Reload)
        {
            this.Player.Cog.Level_WorldRegeneration.Regenerate();
        }
        
        if(this.Camera != null)
        {
            this.Camera.Cog.Actions.Cancel();
            var seq = Action.Sequence(this.Camera.Cog.Actions);
            var grp = Action.Group(seq);
            Action.Property(grp, @this.Camera.Cog.Transform.Translation, this.NewCameraPosition, this.MoveTime, Ease.QuadInOut);
        }
    }
}