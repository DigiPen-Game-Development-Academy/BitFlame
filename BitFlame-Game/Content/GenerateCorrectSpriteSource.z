class GenerateCorrectSpriteSource : ZilchComponent
{
    [Property] var StandAlone : SpriteSource;
    
    [Property] var Plain1 : SpriteSource;
    
    [Property] var Plain2 : SpriteSource;
    
    [Property] var Plain3 : SpriteSource;
    
    [Property] var Plain4 : SpriteSource;
    
    [Property] var LeftFlat : SpriteSource;
    
    [Property] var RightFlat : SpriteSource;
    
    [Property] var UpFlat : SpriteSource;
    
    [Property] var BottomFlat : SpriteSource;
    
    [Property] var UpDownFlat : SpriteSource;
    
    [Property] var LeftRightFlat : SpriteSource;
    
    [Property] var LeftBottomCorner : SpriteSource;
    
    [Property] var RightBottomCorner : SpriteSource;
    
    [Property] var LeftUpCorner : SpriteSource;
    
    [Property] var RightUpCorner : SpriteSource;
    
    [Property] var UpEnd : SpriteSource;
    
    [Property] var DownEnd : SpriteSource;
    
    [Property] var LeftEnd : SpriteSource;
    
    [Property] var RightEnd : SpriteSource;
    
    var LeftResults : CastResult;
    
    var RightResults : CastResult;
    
    var UpResults : CastResult;
    
    var DownResults : CastResult;
    
    var RandomGen : Random = Random();
    
    var Generate : Boolean = false;
    
    function RayCast(direction : Real3, start : Real3) : CastResult
    {
        var ray = Ray();
        
        ray.Start = start;
        ray.Direction = direction;
        
        var castResults = this.Space.PhysicsSpace.CastRayFirst(ray);
        return castResults;
    }
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Generate)
        {
            this.UpResults = this.RayCast(Real3(0.0,1.0,0.0), this.Owner.Transform.Translation);
            
            this.DownResults = this.RayCast(Real3(0.0,-1.0,0.0), this.Owner.Transform.Translation);
            
            this.LeftResults = this.RayCast(Real3(-1.0,0.0,0.0), this.Owner.Transform.Translation);
            
            this.RightResults = this.RayCast(Real3(1.0,0.0,0.0), this.Owner.Transform.Translation);
            
            if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.StandAlone;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                var randomNum = Math.Round(this.RandomGen.Range(1,4));
                
                if(randomNum == 1)
                {
                    this.Owner.Sprite.SpriteSource = this.Plain1;
                }
                else if(randomNum == 2)
                {
                    this.Owner.Sprite.SpriteSource = this.Plain2;
                }
                else if(randomNum == 3)
                {
                    this.Owner.Sprite.SpriteSource = this.Plain3;
                }
                else if(randomNum == 4)
                {
                    this.Owner.Sprite.SpriteSource = this.Plain4;
                }
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.UpFlat;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.BottomFlat;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.LeftFlat;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.RightFlat;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.LeftRightFlat;
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.UpDownFlat;
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.RightUpCorner;
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.LeftUpCorner;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.RightBottomCorner;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.LeftBottomCorner;
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance <= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.RightEnd;
            }
            else if(this.UpResults.Distance <= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.DownEnd;
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance >= 0.6 && this.RightResults.Distance <= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.LeftEnd;
            }
            else if(this.UpResults.Distance >= 0.6 && this.DownResults.Distance <= 0.6 && this.RightResults.Distance >= 0.6 && this.LeftResults.Distance >= 0.6)
            {
                this.Owner.Sprite.SpriteSource = this.UpEnd;
            }
            else
            {
                Console.WriteLine("else");
            }
            
            this.Owner.RemoveComponentByName("GenerateCorrectSpriteSource");
        }
    }
}
